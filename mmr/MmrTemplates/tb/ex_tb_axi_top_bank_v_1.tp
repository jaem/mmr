`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// Company:
// Engineer:
//
// Create Date: 03.07.2016 12:23:24
// Design Name:
// Module Name: tb_top
// Project Name:
// Target Devices:
// Tool Versions:
// Description:
//
// Dependencies:
//
// Revision:
// Revision 0.01 - File Created
// Additional Comments:
//
//////////////////////////////////////////////////////////////////////////////////

module ex_tb();

parameter DATA_W_IN_BYTES       = 4;
parameter ADDR_W_IN_BITS        = 10;
parameter DCADDR_LOW_BIT_W      = 8;
parameter DCADDR_STROBE_MEM_SEG = 2;

parameter PERIOD                = 1000;

    // AXI interface control signals
    reg  [(ADDR_W_IN_BITS)-1 : 0]      S_AXI_AWADDR;      // Write channel Protection type. This signal indicates the    // privilege and security level of the transaction; and whether    // the transaction is a data access or an instruction access.
    reg  [2 : 0]                       S_AXI_AWPROT;      // Write address valid. This signal indicates that the master signaling // valid write address and control information.
    reg                                S_AXI_AWVALID;     // Write address ready. This signal indicates that the slave is ready    // to accept an address and associated control signals.
    wire                               S_AXI_AWREADY;     // Write data (issued by master; acceped by Slave)

    reg  [(DATA_W_IN_BYTES*8) - 1:0]   S_AXI_WDATA;       // Write strobes. This signal indicates which byte lanes hold    // valid data. There is one write strobe bit for each eight    // bits of the write data bus.
    reg  [DATA_W_IN_BYTES-1 : 0]       S_AXI_WSTRB;       // Write valid. This signal indicates that valid write    // data and strobes are available.
    reg                                S_AXI_WVALID;      // Write ready. This signal indicates that the slave    // can accept the write data.
    wire                               S_AXI_WREADY;      // Write response. This signal indicates the status    // of the write transaction.

    wire [1 : 0]                       S_AXI_BRESP;       // Write response valid. This signal indicates that the channel    // is signaling a valid write response.
    wire                               S_AXI_BVALID;      // Response ready. This signal indicates that the master    // can accept a write response.
    reg                                S_AXI_BREADY;      // Read address (issued by master; acceped by Slave)

    reg  [(ADDR_W_IN_BITS)-1 : 0]      S_AXI_ARADDR;      // Protection type. This signal indicates the privilege    // and security level of the transaction; and whether the    // transaction is a data access or an instruction access.
    reg  [2 : 0]                       S_AXI_ARPROT;      // Read address valid. This signal indicates that the channel    // is signaling valid read address and control information.
    reg                                S_AXI_ARVALID;     // Read address ready. This signal indicates that the slave is    // ready to accept an address and associated control signals.
    wire                               S_AXI_ARREADY;     // Read data (issued by slave)

    wire [(DATA_W_IN_BYTES*8) - 1:0]   S_AXI_RDATA;       // Read response. This signal indicates the status of the    // read transfer.
    reg  [(DATA_W_IN_BYTES*8) - 1:0]   read_data;         //
    wire [1 : 0]                       S_AXI_RRESP;       // Read valid. This signal indicates that the channel is signaling the required read data.
    wire                               S_AXI_RVALID;      // Read ready. This signal indicates that the master can accept the read data and response information.
    reg                                S_AXI_RREADY;      //

// Clock & reset for registers
reg                                  ACLK;              // Clock source
reg                                  ARESETn;           // Reset source

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
//jjreg_top_ctrl  #(
example  #(
  .DATA_W_IN_BYTES       (DATA_W_IN_BYTES       ),
  .ADDR_W_IN_BITS        (ADDR_W_IN_BITS        ),
  .DCADDR_LOW_BIT_W      (DCADDR_LOW_BIT_W      ),
  .DCADDR_STROBE_MEM_SEG (DCADDR_STROBE_MEM_SEG )
) jjreg_top_ctrl_i (
    .S_AXI_AWADDR      (S_AXI_AWADDR  ), // Write channel Protection type. This signal indicates the    // privilege and security level of the transaction, and whether    // the transaction is a data access or an instruction access.
    .S_AXI_AWPROT      (S_AXI_AWPROT  ), // Write address valid. This signal indicates that the master signaling // valid write address and control information.
    .S_AXI_AWVALID     (S_AXI_AWVALID ), // Write address ready. This signal indicates that the slave is ready    // to accept an address and associated control signals.
    .S_AXI_AWREADY     (S_AXI_AWREADY ), // Write data (issued by master, acceped by Slave)

    .S_AXI_WDATA       (S_AXI_WDATA   ), // Write strobes. This signal indicates which byte lanes hold    // valid data. There is one write strobe bit for each eight    // bits of the write data bus.
    .S_AXI_WSTRB       (S_AXI_WSTRB   ), // Write valid. This signal indicates that valid write    // data and strobes are available.
    .S_AXI_WVALID      (S_AXI_WVALID  ), // Write ready. This signal indicates that the slave    // can accept the write data.
    .S_AXI_WREADY      (S_AXI_WREADY  ), // Write response. This signal indicates the status    // of the write transaction.

    .S_AXI_BRESP       (S_AXI_BRESP   ), // Write response valid. This signal indicates that the channel    // is signaling a valid write response.
    .S_AXI_BVALID      (S_AXI_BVALID  ), // Response ready. This signal indicates that the master    // can accept a write response.
    .S_AXI_BREADY      (S_AXI_BREADY  ), // Read address (issued by master, acceped by Slave)

    .S_AXI_ARADDR      (S_AXI_ARADDR  ), // Protection type. This signal indicates the privilege    // and security level of the transaction, and whether the    // transaction is a data access or an instruction access.
    .S_AXI_ARPROT      (S_AXI_ARPROT  ), // Read address valid. This signal indicates that the channel    // is signaling valid read address and control information.
    .S_AXI_ARVALID     (S_AXI_ARVALID ), // Read address ready. This signal indicates that the slave is    // ready to accept an address and associated control signals.
    .S_AXI_ARREADY     (S_AXI_ARREADY ), // Read data (issued by slave)

    .S_AXI_RDATA       (S_AXI_RDATA   ), // Read response. This signal indicates the status of the    // read transfer.
    .S_AXI_RRESP       (S_AXI_RRESP   ), // Read valid. This signal indicates that the channel is signaling the required read data.
    .S_AXI_RVALID      (S_AXI_RVALID  ), // Read ready. This signal indicates that the master can accept the read data and response information.
    .S_AXI_RREADY      (S_AXI_RREADY  ),

   .ACLK              (ACLK          ), // Clock source
   .ARESETn           (ARESETn       )  // Reset source

);

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
always begin
   ACLK = 1'b0;
   #(PERIOD/2) ACLK = 1'b1;
   #(PERIOD/2);
end

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
initial begin
   wait_aclk_cycles_for_to(200);
end

initial begin
   ARESETn = 0;
   initialise_axi_inputs();
   wait_aclk_cycles(20);
   ARESETn = 1;
   wait_aclk_cycles(20);
//   bank_rd_data = 44;
   axi_read('h20,read_data);
   axi_write('h20,33);
//   bank_rd_data = 49;
   axi_read('h20,read_data);
   wait_aclk_cycles(20);
   axi_write('h00_00,'h0);
   axi_write('h00_00,'hff);
   axi_write('h01_00,'h1);
   axi_write('h02_00,'h2);
   axi_read('h00_00,read_data);
   axi_read('h01_00,read_data);
   axi_read('h02_00,read_data);
   axi_read('h04_00,read_data);

   $stop;
end

task initialise_axi_inputs;
   begin
   S_AXI_AWADDR  = 'd0;
   S_AXI_AWPROT  = 'd0;
   S_AXI_AWVALID = 'd0;

   S_AXI_WDATA   = 'd0;
   S_AXI_WSTRB   = 'd0;
   S_AXI_WVALID  = 'd0;

   S_AXI_BREADY  = 'd0;

   S_AXI_ARADDR  = 'd0;
   S_AXI_ARPROT  = 'd0;
   S_AXI_ARVALID = 'd0;

   S_AXI_RREADY  = 'd0;
   end
endtask

//------------------------------------------------------------------------------
//
//------------------------------------------------------------------------------
task axi_read;
   input  [(ADDR_W_IN_BITS)-1 : 0] ADDR;
   output [(DATA_W_IN_BYTES*8) - 1:0] DATA;
   begin
   @(posedge ACLK);
   S_AXI_ARADDR  <= ADDR;
   S_AXI_ARPROT  <= 'd0;
   S_AXI_ARVALID <= 'd1;
   S_AXI_RREADY  <= 'd1; // This can be high as xfer starts

   @(posedge ACLK);
   while( S_AXI_ARREADY == 'd0 )
      @(posedge ACLK);

   S_AXI_ARVALID <= 'd0;

   while( S_AXI_RVALID == 'd0 )
      @(posedge ACLK);

   S_AXI_RREADY <= 'd0;
   DATA         <= S_AXI_RDATA;
//   S_AXI_RRESP
   end
endtask

task axi_write;
   input  [(ADDR_W_IN_BITS)-1 : 0] ADDR;
   input  [(DATA_W_IN_BYTES*8) - 1:0] DATA;
   begin
   @(posedge ACLK);
   S_AXI_AWADDR  <= ADDR;
   S_AXI_AWPROT  <= 'd0;
   S_AXI_AWVALID <= 'd1;
   S_AXI_WVALID  <= 'd1;
   S_AXI_WDATA   <= DATA;

   @(posedge ACLK);
   while( (S_AXI_AWREADY & S_AXI_WREADY) == 'd0 )
      @(posedge ACLK);

   S_AXI_AWVALID <= 'd0;
   S_AXI_WVALID  <= 'd0;

   S_AXI_BREADY <= 'd1;
   while( S_AXI_BVALID == 'd0 )
      @(posedge ACLK);

   S_AXI_BREADY <= 'd0;
//   @(posedge ACLK);
//   S_AXI_BREADY <= 'd0;
   end
endtask

task wait_aclk_cycles_for_to;
   input  [31 : 0] cycles;
   begin
      while( cycles > 'd0 ) begin
         @(posedge ACLK);
         cycles = cycles - 'd1;
      end
   $display("---ERROR simulation timeout!");
   $stop;
   end
endtask


task wait_aclk_cycles;
   input  [31 : 0] cycles;
   begin
      while( cycles > 'd0 ) begin
         @(posedge ACLK);
         cycles = cycles - 'd1;
      end
   end
endtask
endmodule


module axi4lite_rw_engine (

   input  wire                             read_start,        // Single pulse expected
   input  wire [31:0]                      read_addr ,        // 
   output reg  [31:0]                      read_data ,        // 
   input  wire [10:0]                      read_dly_ack,      //
   output wire                             read_done,         // Single pulse given

   input  wire                             write_start,       // Single pulse expected
   input  wire [31:0]                      write_addr ,       // 
   input  wire [31:0]                      write_data ,       // 
   input  wire [10:0]                      write_dly_awv,     // Delay the address valid signal
   input  wire [10:0]                      write_dly_wv,      // Delay the write valid signal
   input  wire [10:0]                      write_dly_wr,      // Delay the write ready ack
   output wire                             write_done         // Single pulse given
   
   output reg  [(ADDR_W_IN_BITS)-1 : 0]    S_AXI_AWADDR=0,    // Write channel Protection type. This signal indicates the privilege and security level of the transaction, and whether the transaction is a data access or an instruction access.
   output reg  [2 : 0]                     S_AXI_AWPROT=0,    // Write address valid. This signal indicates that the master signaling valid write address and control information.
   output reg                              S_AXI_AWVALID=0,   // Write address ready. This signal indicates that the slave is ready    // to accept an address and associated control signals.
   input  wire                             S_AXI_AWREADY,     // Write data (issued by master, acceped by Slave) 
    
   output reg  [(DATA_W_IN_BYTES*8) - 1:0] S_AXI_WDATA=0,     // Write strobes. This signal indicates which byte lanes hold    // valid data. There is one write strobe bit for each eight    // bits of the write data bus.    
   output reg  [DATA_W_IN_BYTES-1 : 0]     S_AXI_WSTRB=0,     // Write valid. This signal indicates that valid write    // data and strobes are available.
   output reg                              S_AXI_WVALID=0,    // Write ready. This signal indicates that the slave    // can accept the write data.
   input  wire                             S_AXI_WREADY,      // Write response. This signal indicates the status    // of the write transaction.
    
   output reg  [1 : 0]                     S_AXI_BRESP=0,     // Write response valid. This signal indicates that the channel    // is signaling a valid write response.
   output reg                              S_AXI_BVALID=0,    // Response ready. This signal indicates that the master    // can accept a write response.
   input  wire                             S_AXI_BREADY,      // Read address (issued by master, acceped by Slave)
    
   output reg  [(ADDR_W_IN_BITS)-1 : 0]    S_AXI_ARADDR=0,    // Protection type. This signal indicates the privilege    // and security level of the transaction, and whether the    // transaction is a data access or an instruction access.
   output reg  [2 : 0]                     S_AXI_ARPROT=0,    // Read address valid. This signal indicates that the channel    // is signaling valid read address and control information.
   output reg                              S_AXI_ARVALID=0,   // Read address ready. This signal indicates that the slave is    // ready to accept an address and associated control signals.
   input  wire                             S_AXI_ARREADY,     // Read data (issued by slave)
    
   input  reg  [(DATA_W_IN_BYTES*8) - 1:0] S_AXI_RDATA,       // Read response. This signal indicates the status of the    // read transfer.
   input  wire [1 : 0]                     S_AXI_RRESP,       // Read valid. This signal indicates that the channel is signaling the required read data.
   input  reg                              S_AXI_RVALID,      // Read ready. This signal indicates that the master can accept the read data and response information.
   output wire                             S_AXI_RREADY=0,    // 

   input  wire                             ACLK             , // Clock source 
   input  wire                             ARESETn            // Reset source
      
);

